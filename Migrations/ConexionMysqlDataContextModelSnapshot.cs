// <auto-generated />
using System;
using MVCLibroteca.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MVCLibroteca.Migrations
{
    [DbContext(typeof(ConexionMysqlDataContext))]
    partial class ConexionMysqlDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("MVCLibroteca.Models.Autores", b =>
                {
                    b.Property<int>("idAutor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("aMaterno")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("aPaterno")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("estatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("nacionalidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("idAutor");

                    b.ToTable("autores");
                });

            modelBuilder.Entity("MVCLibroteca.Models.Libros", b =>
                {
                    b.Property<int>("idLibro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Editorial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("autoresidAutor")
                        .HasColumnType("int");

                    b.Property<bool>("estatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("fechaPublicacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("idAutor")
                        .HasColumnType("int");

                    b.Property<string>("portada")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<decimal>("precio")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("stock")
                        .HasColumnType("int");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("idLibro");

                    b.HasIndex("autoresidAutor");

                    b.ToTable("libros");
                });

            modelBuilder.Entity("MVCLibroteca.Models.Usuarios", b =>
                {
                    b.Property<int>("idUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("confirmarPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("estatus")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Campo para determinar si esta activo");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("rol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("idUsuario");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("MVCLibroteca.Models.servicios", b =>
                {
                    b.Property<int>("idservicios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("estatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("imagen")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("presio")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("idservicios");

                    b.ToTable("servicios");
                });

            modelBuilder.Entity("MVCLibroteca.Models.Libros", b =>
                {
                    b.HasOne("MVCLibroteca.Models.Autores", "autores")
                        .WithMany()
                        .HasForeignKey("autoresidAutor");

                    b.Navigation("autores");
                });
#pragma warning restore 612, 618
        }
    }
}
